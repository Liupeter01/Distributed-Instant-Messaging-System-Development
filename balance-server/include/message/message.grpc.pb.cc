// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace message {

static const char* VerificationService_method_names[] = {
  "/message.VerificationService/GetVerificationCode",
};

std::unique_ptr< VerificationService::Stub> VerificationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VerificationService::Stub> stub(new VerificationService::Stub(channel, options));
  return stub;
}

VerificationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetVerificationCode_(VerificationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VerificationService::Stub::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::message::GetVerificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVerificationCode_, context, request, response);
}

void VerificationService::Stub::async::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerificationCode_, context, request, response, std::move(f));
}

void VerificationService::Stub::async::GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVerificationCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* VerificationService::Stub::PrepareAsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GetVerificationResponse, ::message::GetVerificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVerificationCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* VerificationService::Stub::AsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVerificationCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

VerificationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VerificationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VerificationService::Service, ::message::GetVerificationRequest, ::message::GetVerificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VerificationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GetVerificationRequest* req,
             ::message::GetVerificationResponse* resp) {
               return service->GetVerificationCode(ctx, req, resp);
             }, this)));
}

VerificationService::Service::~Service() {
}

::grpc::Status VerificationService::Service::GetVerificationCode(::grpc::ServerContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UserService_method_names[] = {
  "/message.UserService/RegisterUser",
  "/message.UserService/LoginUser",
  "/message.UserService/LogoutUser",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterUser_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginUser_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LogoutUser_(UserService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::message::UserRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::UserRegisterRequest, ::message::UserRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterUser_, context, request, response);
}

void UserService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::UserRegisterRequest, ::message::UserRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>* UserService::Stub::PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::UserRegisterResponse, ::message::UserRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>* UserService::Stub::AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::message::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::LoginRequest, ::message::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoginUser_, context, request, response);
}

void UserService::Stub::async::LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::LoginRequest, ::message::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::LoginResponse>* UserService::Stub::PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::LoginResponse, ::message::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoginUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::LoginResponse>* UserService::Stub::AsyncLoginUserRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::message::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::LogoutRequest, ::message::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LogoutUser_, context, request, response);
}

void UserService::Stub::async::LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::LogoutRequest, ::message::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogoutUser_, context, request, response, std::move(f));
}

void UserService::Stub::async::LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogoutUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>* UserService::Stub::PrepareAsyncLogoutUserRaw(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::LogoutResponse, ::message::LogoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LogoutUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>* UserService::Stub::AsyncLogoutUserRaw(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::message::UserRegisterRequest, ::message::UserRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::UserRegisterRequest* req,
             ::message::UserRegisterResponse* resp) {
               return service->RegisterUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::message::LoginRequest, ::message::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::LoginRequest* req,
             ::message::LoginResponse* resp) {
               return service->LoginUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::message::LogoutRequest, ::message::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::LogoutRequest* req,
             ::message::LogoutResponse* resp) {
               return service->LogoutUser(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::RegisterUser(::grpc::ServerContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::LoginUser(::grpc::ServerContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::LogoutUser(::grpc::ServerContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ChattingRegisterService_method_names[] = {
  "/message.ChattingRegisterService/RegisterInstance",
  "/message.ChattingRegisterService/RegisterGrpc",
  "/message.ChattingRegisterService/ShutdownInstance",
  "/message.ChattingRegisterService/ShutdownGrpc",
  "/message.ChattingRegisterService/GetInstancePeers",
  "/message.ChattingRegisterService/GetGrpcPeers",
};

std::unique_ptr< ChattingRegisterService::Stub> ChattingRegisterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChattingRegisterService::Stub> stub(new ChattingRegisterService::Stub(channel, options));
  return stub;
}

ChattingRegisterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterInstance_(ChattingRegisterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterGrpc_(ChattingRegisterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShutdownInstance_(ChattingRegisterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShutdownGrpc_(ChattingRegisterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstancePeers_(ChattingRegisterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGrpcPeers_(ChattingRegisterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChattingRegisterService::Stub::RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterInstance_, context, request, response);
}

void ChattingRegisterService::Stub::async::RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, std::move(f));
}

void ChattingRegisterService::Stub::async::RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChattingRegisterService::Stub::RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterGrpc_, context, request, response);
}

void ChattingRegisterService::Stub::async::RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGrpc_, context, request, response, std::move(f));
}

void ChattingRegisterService::Stub::async::RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGrpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::PrepareAsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterGrpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::AsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterGrpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChattingRegisterService::Stub::ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutdownInstance_, context, request, response);
}

void ChattingRegisterService::Stub::async::ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownInstance_, context, request, response, std::move(f));
}

void ChattingRegisterService::Stub::async::ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::PrepareAsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::ShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutdownInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::AsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChattingRegisterService::Stub::ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutdownGrpc_, context, request, response);
}

void ChattingRegisterService::Stub::async::ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownGrpc_, context, request, response, std::move(f));
}

void ChattingRegisterService::Stub::async::ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownGrpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::PrepareAsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::ShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutdownGrpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ChattingRegisterService::Stub::AsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownGrpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChattingRegisterService::Stub::GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInstancePeers_, context, request, response);
}

void ChattingRegisterService::Stub::async::GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInstancePeers_, context, request, response, std::move(f));
}

void ChattingRegisterService::Stub::async::GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInstancePeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ChattingRegisterService::Stub::PrepareAsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInstancePeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ChattingRegisterService::Stub::AsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInstancePeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChattingRegisterService::Stub::GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGrpcPeers_, context, request, response);
}

void ChattingRegisterService::Stub::async::GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGrpcPeers_, context, request, response, std::move(f));
}

void ChattingRegisterService::Stub::async::GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGrpcPeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ChattingRegisterService::Stub::PrepareAsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGrpcPeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ChattingRegisterService::Stub::AsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGrpcPeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChattingRegisterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingRegisterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingRegisterService::Service, ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RegisterRequest* req,
             ::message::StatusResponse* resp) {
               return service->RegisterInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingRegisterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingRegisterService::Service, ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RegisterRequest* req,
             ::message::StatusResponse* resp) {
               return service->RegisterGrpc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingRegisterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingRegisterService::Service, ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ShutdownRequest* req,
             ::message::StatusResponse* resp) {
               return service->ShutdownInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingRegisterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingRegisterService::Service, ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ShutdownRequest* req,
             ::message::StatusResponse* resp) {
               return service->ShutdownGrpc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingRegisterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingRegisterService::Service, ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetInstancePeers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChattingRegisterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChattingRegisterService::Service, ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChattingRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetGrpcPeers(ctx, req, resp);
             }, this)));
}

ChattingRegisterService::Service::~Service() {
}

::grpc::Status ChattingRegisterService::Service::RegisterInstance(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChattingRegisterService::Service::RegisterGrpc(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChattingRegisterService::Service::ShutdownInstance(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChattingRegisterService::Service::ShutdownGrpc(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChattingRegisterService::Service::GetInstancePeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChattingRegisterService::Service::GetGrpcPeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ResourcesRegisterService_method_names[] = {
  "/message.ResourcesRegisterService/RegisterInstance",
  "/message.ResourcesRegisterService/RegisterGrpc",
  "/message.ResourcesRegisterService/ShutdownInstance",
  "/message.ResourcesRegisterService/ShutdownGrpc",
  "/message.ResourcesRegisterService/GetInstancePeers",
  "/message.ResourcesRegisterService/GetGrpcPeers",
};

std::unique_ptr< ResourcesRegisterService::Stub> ResourcesRegisterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ResourcesRegisterService::Stub> stub(new ResourcesRegisterService::Stub(channel, options));
  return stub;
}

ResourcesRegisterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterInstance_(ResourcesRegisterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterGrpc_(ResourcesRegisterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShutdownInstance_(ResourcesRegisterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShutdownGrpc_(ResourcesRegisterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInstancePeers_(ResourcesRegisterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGrpcPeers_(ResourcesRegisterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ResourcesRegisterService::Stub::RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterInstance_, context, request, response);
}

void ResourcesRegisterService::Stub::async::RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, std::move(f));
}

void ResourcesRegisterService::Stub::async::RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourcesRegisterService::Stub::RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterGrpc_, context, request, response);
}

void ResourcesRegisterService::Stub::async::RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGrpc_, context, request, response, std::move(f));
}

void ResourcesRegisterService::Stub::async::RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterGrpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::PrepareAsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterGrpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::AsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterGrpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourcesRegisterService::Stub::ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutdownInstance_, context, request, response);
}

void ResourcesRegisterService::Stub::async::ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownInstance_, context, request, response, std::move(f));
}

void ResourcesRegisterService::Stub::async::ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::PrepareAsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::ShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutdownInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::AsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourcesRegisterService::Stub::ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutdownGrpc_, context, request, response);
}

void ResourcesRegisterService::Stub::async::ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownGrpc_, context, request, response, std::move(f));
}

void ResourcesRegisterService::Stub::async::ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutdownGrpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::PrepareAsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::ShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutdownGrpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* ResourcesRegisterService::Stub::AsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownGrpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourcesRegisterService::Stub::GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInstancePeers_, context, request, response);
}

void ResourcesRegisterService::Stub::async::GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInstancePeers_, context, request, response, std::move(f));
}

void ResourcesRegisterService::Stub::async::GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInstancePeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourcesRegisterService::Stub::PrepareAsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInstancePeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourcesRegisterService::Stub::AsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInstancePeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourcesRegisterService::Stub::GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGrpcPeers_, context, request, response);
}

void ResourcesRegisterService::Stub::async::GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGrpcPeers_, context, request, response, std::move(f));
}

void ResourcesRegisterService::Stub::async::GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGrpcPeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourcesRegisterService::Stub::PrepareAsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGrpcPeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourcesRegisterService::Stub::AsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGrpcPeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

ResourcesRegisterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourcesRegisterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourcesRegisterService::Service, ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourcesRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RegisterRequest* req,
             ::message::StatusResponse* resp) {
               return service->RegisterInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourcesRegisterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourcesRegisterService::Service, ::message::RegisterRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourcesRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RegisterRequest* req,
             ::message::StatusResponse* resp) {
               return service->RegisterGrpc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourcesRegisterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourcesRegisterService::Service, ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourcesRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ShutdownRequest* req,
             ::message::StatusResponse* resp) {
               return service->ShutdownInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourcesRegisterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourcesRegisterService::Service, ::message::ShutdownRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourcesRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ShutdownRequest* req,
             ::message::StatusResponse* resp) {
               return service->ShutdownGrpc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourcesRegisterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourcesRegisterService::Service, ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourcesRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetInstancePeers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourcesRegisterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourcesRegisterService::Service, ::message::PeerRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourcesRegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetGrpcPeers(ctx, req, resp);
             }, this)));
}

ResourcesRegisterService::Service::~Service() {
}

::grpc::Status ResourcesRegisterService::Service::RegisterInstance(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourcesRegisterService::Service::RegisterGrpc(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourcesRegisterService::Service::ShutdownInstance(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourcesRegisterService::Service::ShutdownGrpc(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourcesRegisterService::Service::GetInstancePeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourcesRegisterService::Service::GetGrpcPeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

