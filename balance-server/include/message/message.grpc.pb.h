// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto
#ifndef GRPC_message_2eproto__INCLUDED
#define GRPC_message_2eproto__INCLUDED

#include "message.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace message {

// prepared for verification service
class VerificationService final {
 public:
  static constexpr char const* service_full_name() {
    return "message.VerificationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::message::GetVerificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::GetVerificationResponse>> AsyncGetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::GetVerificationResponse>>(AsyncGetVerificationCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::GetVerificationResponse>> PrepareAsyncGetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::GetVerificationResponse>>(PrepareAsyncGetVerificationCodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::GetVerificationResponse>* AsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::GetVerificationResponse>* PrepareAsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::message::GetVerificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>> AsyncGetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>>(AsyncGetVerificationCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>> PrepareAsyncGetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>>(PrepareAsyncGetVerificationCodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVerificationCode(::grpc::ClientContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* AsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::GetVerificationResponse>* PrepareAsyncGetVerificationCodeRaw(::grpc::ClientContext* context, const ::message::GetVerificationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetVerificationCode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetVerificationCode(::grpc::ServerContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVerificationCode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerificationCode(::grpc::ServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVerificationCode(::grpc::ServerContext* context, ::message::GetVerificationRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::GetVerificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetVerificationCode<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetVerificationCode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::GetVerificationRequest, ::message::GetVerificationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::GetVerificationRequest* request, ::message::GetVerificationResponse* response) { return this->GetVerificationCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetVerificationCode(
        ::grpc::MessageAllocator< ::message::GetVerificationRequest, ::message::GetVerificationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::GetVerificationRequest, ::message::GetVerificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerificationCode(::grpc::ServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVerificationCode(
      ::grpc::CallbackServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetVerificationCode<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVerificationCode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerificationCode(::grpc::ServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVerificationCode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerificationCode(::grpc::ServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVerificationCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetVerificationCode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVerificationCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVerificationCode(::grpc::ServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetVerificationCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVerificationCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVerificationCode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::GetVerificationRequest, ::message::GetVerificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::GetVerificationRequest, ::message::GetVerificationResponse>* streamer) {
                       return this->StreamedGetVerificationCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVerificationCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVerificationCode(::grpc::ServerContext* /*context*/, const ::message::GetVerificationRequest* /*request*/, ::message::GetVerificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVerificationCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::GetVerificationRequest,::message::GetVerificationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetVerificationCode<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetVerificationCode<Service > StreamedService;
};

class UserService final {
 public:
  static constexpr char const* service_full_name() {
    return "message.UserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Register new user UUID and get allocated chatting server
    virtual ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::message::UserRegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserRegisterResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserRegisterResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserRegisterResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserRegisterResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    // User login
    virtual ::grpc::Status LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::message::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>> AsyncLoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>>(AsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>> PrepareAsyncLoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>>(PrepareAsyncLoginUserRaw(context, request, cq));
    }
    // User logout
    virtual ::grpc::Status LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::message::LogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LogoutResponse>> AsyncLogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LogoutResponse>>(AsyncLogoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LogoutResponse>> PrepareAsyncLogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::LogoutResponse>>(PrepareAsyncLogoutUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Register new user UUID and get allocated chatting server
      virtual void RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // User login
      virtual void LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // User logout
      virtual void LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::UserRegisterResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::UserRegisterResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>* AsyncLoginUserRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::LoginResponse>* PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::LogoutResponse>* AsyncLogoutUserRaw(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::LogoutResponse>* PrepareAsyncLogoutUserRaw(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::message::UserRegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>> AsyncRegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>>(AsyncRegisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>> PrepareAsyncRegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>>(PrepareAsyncRegisterUserRaw(context, request, cq));
    }
    ::grpc::Status LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::message::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>> AsyncLoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>>(AsyncLoginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>> PrepareAsyncLoginUser(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>>(PrepareAsyncLoginUserRaw(context, request, cq));
    }
    ::grpc::Status LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::message::LogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>> AsyncLogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>>(AsyncLogoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>> PrepareAsyncLogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>>(PrepareAsyncLogoutUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterUser(::grpc::ClientContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void LoginUser(::grpc::ClientContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void LogoutUser(::grpc::ClientContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>* AsyncRegisterUserRaw(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::UserRegisterResponse>* PrepareAsyncRegisterUserRaw(::grpc::ClientContext* context, const ::message::UserRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>* AsyncLoginUserRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::LoginResponse>* PrepareAsyncLoginUserRaw(::grpc::ClientContext* context, const ::message::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>* AsyncLogoutUserRaw(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::LogoutResponse>* PrepareAsyncLogoutUserRaw(::grpc::ClientContext* context, const ::message::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterUser_;
    const ::grpc::internal::RpcMethod rpcmethod_LoginUser_;
    const ::grpc::internal::RpcMethod rpcmethod_LogoutUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Register new user UUID and get allocated chatting server
    virtual ::grpc::Status RegisterUser(::grpc::ServerContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response);
    // User login
    virtual ::grpc::Status LoginUser(::grpc::ServerContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response);
    // User logout
    virtual ::grpc::Status LogoutUser(::grpc::ServerContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::message::UserRegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::UserRegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoginUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginUser(::grpc::ServerContext* context, ::message::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogoutUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LogoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogoutUser(::grpc::ServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogoutUser(::grpc::ServerContext* context, ::message::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::LogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterUser<WithAsyncMethod_LoginUser<WithAsyncMethod_LogoutUser<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::UserRegisterRequest, ::message::UserRegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::UserRegisterRequest* request, ::message::UserRegisterResponse* response) { return this->RegisterUser(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterUser(
        ::grpc::MessageAllocator< ::message::UserRegisterRequest, ::message::UserRegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::UserRegisterRequest, ::message::UserRegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoginUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::message::LoginRequest, ::message::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::LoginRequest* request, ::message::LoginResponse* response) { return this->LoginUser(context, request, response); }));}
    void SetMessageAllocatorFor_LoginUser(
        ::grpc::MessageAllocator< ::message::LoginRequest, ::message::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::LoginRequest, ::message::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LogoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LogoutUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::message::LogoutRequest, ::message::LogoutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::LogoutRequest* request, ::message::LogoutResponse* response) { return this->LogoutUser(context, request, response); }));}
    void SetMessageAllocatorFor_LogoutUser(
        ::grpc::MessageAllocator< ::message::LogoutRequest, ::message::LogoutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::LogoutRequest, ::message::LogoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LogoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogoutUser(::grpc::ServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogoutUser(
      ::grpc::CallbackServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterUser<WithCallbackMethod_LoginUser<WithCallbackMethod_LogoutUser<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoginUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogoutUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LogoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogoutUser(::grpc::ServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoginUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogoutUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LogoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogoutUser(::grpc::ServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogoutUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoginUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoginUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LogoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LogoutUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogoutUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_LogoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogoutUser(::grpc::ServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LogoutUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::UserRegisterRequest, ::message::UserRegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::UserRegisterRequest, ::message::UserRegisterResponse>* streamer) {
                       return this->StreamedRegisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterUser(::grpc::ServerContext* /*context*/, const ::message::UserRegisterRequest* /*request*/, ::message::UserRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::UserRegisterRequest,::message::UserRegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoginUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::LoginRequest, ::message::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::LoginRequest, ::message::LoginResponse>* streamer) {
                       return this->StreamedLoginUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoginUser(::grpc::ServerContext* /*context*/, const ::message::LoginRequest* /*request*/, ::message::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoginUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::LoginRequest,::message::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogoutUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::LogoutRequest, ::message::LogoutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::LogoutRequest, ::message::LogoutResponse>* streamer) {
                       return this->StreamedLogoutUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogoutUser(::grpc::ServerContext* /*context*/, const ::message::LogoutRequest* /*request*/, ::message::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogoutUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::LogoutRequest,::message::LogoutResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_LoginUser<WithStreamedUnaryMethod_LogoutUser<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterUser<WithStreamedUnaryMethod_LoginUser<WithStreamedUnaryMethod_LogoutUser<Service > > > StreamedService;
};

class ChattingRegisterService final {
 public:
  static constexpr char const* service_full_name() {
    return "message.ChattingRegisterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Chatting server related
    virtual ::grpc::Status RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncRegisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncRegisterInstanceRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncRegisterGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncRegisterGrpcRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncShutdownInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncShutdownInstanceRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncShutdownGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncShutdownGrpcRaw(context, request, cq));
    }
    virtual ::grpc::Status GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> AsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(AsyncGetInstancePeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> PrepareAsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(PrepareAsyncGetInstancePeersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> AsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(AsyncGetGrpcPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> PrepareAsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(PrepareAsyncGetGrpcPeersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Chatting server related
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* AsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* PrepareAsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* AsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* PrepareAsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncRegisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncRegisterInstanceRaw(context, request, cq));
    }
    ::grpc::Status RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncRegisterGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncRegisterGrpcRaw(context, request, cq));
    }
    ::grpc::Status ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncShutdownInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncShutdownInstanceRaw(context, request, cq));
    }
    ::grpc::Status ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncShutdownGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncShutdownGrpcRaw(context, request, cq));
    }
    ::grpc::Status GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> AsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(AsyncGetInstancePeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> PrepareAsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(PrepareAsyncGetInstancePeersRaw(context, request, cq));
    }
    ::grpc::Status GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> AsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(AsyncGetGrpcPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> PrepareAsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(PrepareAsyncGetGrpcPeersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* AsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* PrepareAsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* AsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* PrepareAsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterGrpc_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownGrpc_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInstancePeers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGrpcPeers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Chatting server related
    virtual ::grpc::Status RegisterInstance(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status RegisterGrpc(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status ShutdownInstance(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status ShutdownGrpc(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status GetInstancePeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response);
    virtual ::grpc::Status GetGrpcPeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInstance(::grpc::ServerContext* context, ::message::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGrpc(::grpc::ServerContext* context, ::message::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownInstance(::grpc::ServerContext* context, ::message::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownGrpc(::grpc::ServerContext* context, ::message::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstancePeers(::grpc::ServerContext* context, ::message::PeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::PeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGrpcPeers(::grpc::ServerContext* context, ::message::PeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::PeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterInstance<WithAsyncMethod_RegisterGrpc<WithAsyncMethod_ShutdownInstance<WithAsyncMethod_ShutdownGrpc<WithAsyncMethod_GetInstancePeers<WithAsyncMethod_GetGrpcPeers<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) { return this->RegisterInstance(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterInstance(
        ::grpc::MessageAllocator< ::message::RegisterRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) { return this->RegisterGrpc(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterGrpc(
        ::grpc::MessageAllocator< ::message::RegisterRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) { return this->ShutdownInstance(context, request, response); }));}
    void SetMessageAllocatorFor_ShutdownInstance(
        ::grpc::MessageAllocator< ::message::ShutdownRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) { return this->ShutdownGrpc(context, request, response); }));}
    void SetMessageAllocatorFor_ShutdownGrpc(
        ::grpc::MessageAllocator< ::message::ShutdownRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) { return this->GetInstancePeers(context, request, response); }));}
    void SetMessageAllocatorFor_GetInstancePeers(
        ::grpc::MessageAllocator< ::message::PeerRequest, ::message::PeerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstancePeers(
      ::grpc::CallbackServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) { return this->GetGrpcPeers(context, request, response); }));}
    void SetMessageAllocatorFor_GetGrpcPeers(
        ::grpc::MessageAllocator< ::message::PeerRequest, ::message::PeerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGrpcPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterInstance<WithCallbackMethod_RegisterGrpc<WithCallbackMethod_ShutdownInstance<WithCallbackMethod_ShutdownGrpc<WithCallbackMethod_GetInstancePeers<WithCallbackMethod_GetGrpcPeers<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGrpc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownGrpc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstancePeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGrpcPeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterGrpc(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutdownInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutdownGrpc(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInstancePeers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstancePeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGrpcPeers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGrpcPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::RegisterRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::RegisterRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedRegisterInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::RegisterRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::RegisterRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::RegisterRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedRegisterGrpc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterGrpc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::RegisterRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ShutdownRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedShutdownInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ShutdownRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ShutdownRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedShutdownGrpc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownGrpc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ShutdownRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::PeerRequest, ::message::PeerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::PeerRequest, ::message::PeerResponse>* streamer) {
                       return this->StreamedGetInstancePeers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInstancePeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::PeerRequest,::message::PeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::PeerRequest, ::message::PeerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::PeerRequest, ::message::PeerResponse>* streamer) {
                       return this->StreamedGetGrpcPeers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGrpcPeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::PeerRequest,::message::PeerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterInstance<WithStreamedUnaryMethod_RegisterGrpc<WithStreamedUnaryMethod_ShutdownInstance<WithStreamedUnaryMethod_ShutdownGrpc<WithStreamedUnaryMethod_GetInstancePeers<WithStreamedUnaryMethod_GetGrpcPeers<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterInstance<WithStreamedUnaryMethod_RegisterGrpc<WithStreamedUnaryMethod_ShutdownInstance<WithStreamedUnaryMethod_ShutdownGrpc<WithStreamedUnaryMethod_GetInstancePeers<WithStreamedUnaryMethod_GetGrpcPeers<Service > > > > > > StreamedService;
};

class ResourcesRegisterService final {
 public:
  static constexpr char const* service_full_name() {
    return "message.ResourcesRegisterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Resource server related
    virtual ::grpc::Status RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncRegisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncRegisterInstanceRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncRegisterGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncRegisterGrpcRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncShutdownInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncShutdownInstanceRaw(context, request, cq));
    }
    virtual ::grpc::Status ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncShutdownGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncShutdownGrpcRaw(context, request, cq));
    }
    virtual ::grpc::Status GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> AsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(AsyncGetInstancePeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> PrepareAsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(PrepareAsyncGetInstancePeersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> AsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(AsyncGetGrpcPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>> PrepareAsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>>(PrepareAsyncGetGrpcPeersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Resource server related
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* AsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* PrepareAsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* AsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PeerResponse>* PrepareAsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncRegisterInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncRegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncRegisterInstanceRaw(context, request, cq));
    }
    ::grpc::Status RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncRegisterGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncRegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncRegisterGrpcRaw(context, request, cq));
    }
    ::grpc::Status ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncShutdownInstanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncShutdownInstanceRaw(context, request, cq));
    }
    ::grpc::Status ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncShutdownGrpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncShutdownGrpcRaw(context, request, cq));
    }
    ::grpc::Status GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> AsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(AsyncGetInstancePeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> PrepareAsyncGetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(PrepareAsyncGetInstancePeersRaw(context, request, cq));
    }
    ::grpc::Status GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::message::PeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> AsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(AsyncGetGrpcPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>> PrepareAsyncGetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>>(PrepareAsyncGetGrpcPeersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterInstance(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterGrpc(::grpc::ClientContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ShutdownInstance(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ShutdownGrpc(::grpc::ClientContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInstancePeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGrpcPeers(::grpc::ClientContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncRegisterInstanceRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncRegisterGrpcRaw(::grpc::ClientContext* context, const ::message::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncShutdownInstanceRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncShutdownGrpcRaw(::grpc::ClientContext* context, const ::message::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* AsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* PrepareAsyncGetInstancePeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* AsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* PrepareAsyncGetGrpcPeersRaw(::grpc::ClientContext* context, const ::message::PeerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterGrpc_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownInstance_;
    const ::grpc::internal::RpcMethod rpcmethod_ShutdownGrpc_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInstancePeers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGrpcPeers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Resource server related
    virtual ::grpc::Status RegisterInstance(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status RegisterGrpc(::grpc::ServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status ShutdownInstance(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status ShutdownGrpc(::grpc::ServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status GetInstancePeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response);
    virtual ::grpc::Status GetGrpcPeers(::grpc::ServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInstance(::grpc::ServerContext* context, ::message::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGrpc(::grpc::ServerContext* context, ::message::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownInstance(::grpc::ServerContext* context, ::message::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownGrpc(::grpc::ServerContext* context, ::message::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstancePeers(::grpc::ServerContext* context, ::message::PeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::PeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGrpcPeers(::grpc::ServerContext* context, ::message::PeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::PeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterInstance<WithAsyncMethod_RegisterGrpc<WithAsyncMethod_ShutdownInstance<WithAsyncMethod_ShutdownGrpc<WithAsyncMethod_GetInstancePeers<WithAsyncMethod_GetGrpcPeers<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) { return this->RegisterInstance(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterInstance(
        ::grpc::MessageAllocator< ::message::RegisterRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::RegisterRequest* request, ::message::StatusResponse* response) { return this->RegisterGrpc(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterGrpc(
        ::grpc::MessageAllocator< ::message::RegisterRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::RegisterRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) { return this->ShutdownInstance(context, request, response); }));}
    void SetMessageAllocatorFor_ShutdownInstance(
        ::grpc::MessageAllocator< ::message::ShutdownRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ShutdownRequest* request, ::message::StatusResponse* response) { return this->ShutdownGrpc(context, request, response); }));}
    void SetMessageAllocatorFor_ShutdownGrpc(
        ::grpc::MessageAllocator< ::message::ShutdownRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ShutdownRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) { return this->GetInstancePeers(context, request, response); }));}
    void SetMessageAllocatorFor_GetInstancePeers(
        ::grpc::MessageAllocator< ::message::PeerRequest, ::message::PeerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstancePeers(
      ::grpc::CallbackServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::PeerRequest* request, ::message::PeerResponse* response) { return this->GetGrpcPeers(context, request, response); }));}
    void SetMessageAllocatorFor_GetGrpcPeers(
        ::grpc::MessageAllocator< ::message::PeerRequest, ::message::PeerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::PeerRequest, ::message::PeerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGrpcPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterInstance<WithCallbackMethod_RegisterGrpc<WithCallbackMethod_ShutdownInstance<WithCallbackMethod_ShutdownGrpc<WithCallbackMethod_GetInstancePeers<WithCallbackMethod_GetGrpcPeers<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterGrpc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownInstance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdownGrpc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInstancePeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGrpcPeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterGrpc(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutdownInstance(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownInstance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShutdownGrpc(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShutdownGrpc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInstancePeers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInstancePeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGrpcPeers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGrpcPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterInstance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::RegisterRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::RegisterRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedRegisterInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterInstance(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::RegisterRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterGrpc() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::RegisterRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::RegisterRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedRegisterGrpc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterGrpc(::grpc::ServerContext* /*context*/, const ::message::RegisterRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterGrpc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::RegisterRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownInstance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutdownInstance() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ShutdownRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedShutdownInstance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutdownInstance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownInstance(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownInstance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ShutdownRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShutdownGrpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShutdownGrpc() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ShutdownRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ShutdownRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedShutdownGrpc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShutdownGrpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShutdownGrpc(::grpc::ServerContext* /*context*/, const ::message::ShutdownRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdownGrpc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ShutdownRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInstancePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInstancePeers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::PeerRequest, ::message::PeerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::PeerRequest, ::message::PeerResponse>* streamer) {
                       return this->StreamedGetInstancePeers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInstancePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInstancePeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInstancePeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::PeerRequest,::message::PeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGrpcPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGrpcPeers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::PeerRequest, ::message::PeerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::PeerRequest, ::message::PeerResponse>* streamer) {
                       return this->StreamedGetGrpcPeers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGrpcPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGrpcPeers(::grpc::ServerContext* /*context*/, const ::message::PeerRequest* /*request*/, ::message::PeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGrpcPeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::PeerRequest,::message::PeerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterInstance<WithStreamedUnaryMethod_RegisterGrpc<WithStreamedUnaryMethod_ShutdownInstance<WithStreamedUnaryMethod_ShutdownGrpc<WithStreamedUnaryMethod_GetInstancePeers<WithStreamedUnaryMethod_GetGrpcPeers<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterInstance<WithStreamedUnaryMethod_RegisterGrpc<WithStreamedUnaryMethod_ShutdownInstance<WithStreamedUnaryMethod_ShutdownGrpc<WithStreamedUnaryMethod_GetInstancePeers<WithStreamedUnaryMethod_GetGrpcPeers<Service > > > > > > StreamedService;
};

}  // namespace message


#endif  // GRPC_message_2eproto__INCLUDED
