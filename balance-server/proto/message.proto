syntax = "proto3";
package message;

/*prepared for verification service*/
service VerificationService {
  rpc GetVerificationCode(GetVerificationRequest)
      returns (GetVerificationResponse) {}
}

message GetVerificationRequest { string email = 1; }

message GetVerificationResponse {
  int32 error = 1;
  string email = 2;
  string message = 3;
}

service UserService {
  // Register new user UUID and get allocated chatting server
  rpc RegisterUser(UserRegisterRequest) returns (UserRegisterResponse);

  // User login
  rpc LoginUser(LoginRequest) returns (LoginResponse);

  // User logout
  rpc LogoutUser(LogoutRequest) returns (LogoutResponse);
}

message UserRegisterRequest {
  int32 uuid = 1;
}

message UserRegisterResponse {
  int32 error = 1;
  string host = 2;
  string port = 3;
  string token = 4;
}

message LoginRequest {
  int32 uuid = 1;
  string token = 2;
}

message LoginResponse {
  int32 error = 1;
}

message LogoutRequest {
  int32 uuid = 1;
  string token = 2;
}

message LogoutResponse {
  int32 error = 1;
}

service ChattingRegisterService{
            // Chatting server related
  rpc RegisterInstance(RegisterRequest) returns (StatusResponse);
  rpc RegisterGrpc(RegisterRequest) returns (StatusResponse);
  rpc ShutdownInstance(ShutdownRequest) returns (StatusResponse);
  rpc ShutdownGrpc(ShutdownRequest) returns (StatusResponse);
  rpc GetInstancePeers(PeerRequest) returns (PeerResponse);
  rpc GetGrpcPeers(PeerRequest) returns (PeerResponse);
}

service ResourcesRegisterService{
            // Resource server related
  rpc RegisterInstance(RegisterRequest) returns (StatusResponse);
  rpc RegisterGrpc(RegisterRequest) returns (StatusResponse);
  rpc ShutdownInstance(ShutdownRequest) returns (StatusResponse);
  rpc ShutdownGrpc(ShutdownRequest) returns (StatusResponse);
  rpc GetInstancePeers(PeerRequest) returns (PeerResponse);
  rpc GetGrpcPeers(PeerRequest) returns (PeerResponse);
}

message ServerInfo {
  string name = 1;
  string host = 2;
  string port = 3;
}

message RegisterRequest {
  ServerInfo info = 1;
}

message ShutdownRequest {
  string cur_server = 1;
}

message StatusResponse {
  int32 error = 1;
}

message PeerRequest {
  string cur_server = 1;
}

message PeerResponse {
  int32 error = 1;
  repeated ServerInfo lists = 2;
}
