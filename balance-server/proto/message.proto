syntax = "proto3";
package message;

/*prepared for verification service*/
service VerificationService {
  rpc GetVerificationCode(GetVerificationRequest)
      returns (GetVerificationResponse) {}
}

message GetVerificationRequest { string email = 1; }

message GetVerificationResponse {
  int32 error = 1;
  string email = 2;
  string message = 3;
}

/*prepared for balance service*/
service BalancerService {
  // pass user's uuid parameter to the server, and returns available server
  // address to user
  rpc AddNewUserToServer(RegisterToBalancer)
      returns (GetAllocatedChattingServer) {}

  // user send SERVICE_LOGINSERVER request
  rpc UserLoginToServer(LoginChattingServer) returns (LoginChattingResponse) {}

  // register current chatting server to balance server
  rpc RegisterChattingServerInstance(GrpcRegisterRequest)
      returns (GrpcStatusResponse) {}

  // register current grpc server which belongs to chattingserver to balance
  // server
  rpc RegisterChattingGrpcServer(GrpcRegisterRequest)
      returns (GrpcStatusResponse) {}

  // when chatting server shutdown delete its existance in balance server
  rpc ChattingServerShutDown(GrpcShutdownRequest) returns (GrpcStatusResponse) {
  }

  // when chatting grpc server shutdown delete its existance in balance server
  rpc ChattingGrpcServerShutDown(GrpcShutdownRequest)
      returns (GrpcStatusResponse) {}

  // chatting server acquires other servers info through this service
  rpc GetPeerChattingServerInfo(PeerListsRequest) returns (PeerResponse) {}

  // chatting server acquires other chatting servers' grpc connection info
  rpc GetPeerGrpcServerInfo(PeerListsRequest) returns (PeerResponse) {}
}

// register new uuid to balance and ask for chatting server allocation
message RegisterToBalancer { int32 uuid = 1; }

// get server host & port & token of one chatting server
message GetAllocatedChattingServer {
  int32 error = 1;
  string host = 2;
  string port = 3;
  string token = 4;
}

// transfer uuid and token to balanceserver to check validation
message LoginChattingServer {
  int32 uuid = 1;
  string token = 2;
}

message LoginChattingResponse { int32 error = 1; }

service ResourceService {

  // register current resources server to chatting server
  rpc RegisterResourceServerInstance(GrpcRegisterRequest)
      returns (GrpcStatusResponse) {}

  // register current grpc server which belongs to chattingserver to chatting
  // server
  rpc RegisterResourceGrpcServer(GrpcRegisterRequest)
      returns (GrpcStatusResponse) {}

  // when Resource server shutdown delete its existance in chatting server
  rpc ResourceServerShutDown(GrpcShutdownRequest) returns (GrpcStatusResponse) {
  }

  // when resources grpc server shutdown delete its existance in chatting server
  rpc ResourceGrpcServerShutDown(GrpcShutdownRequest)
      returns (GrpcStatusResponse) {}

  // resources server acquires other servers info through this service
  rpc GetPeerResourceServerInfo(PeerListsRequest) returns (PeerResponse) {}

  // resourcesserver acquires other resources servers' grpc connection info
  rpc GetPeerResourceGrpcServerInfo(PeerListsRequest) returns (PeerResponse) {}
}

message ServerInfo {
  string name = 1;
  string host = 2;
  string port = 3;
}

message PeerListsRequest {
  // current server's name
  string cur_server = 1;
}

// return a array of servers ip address through balancer services
message PeerResponse {
  int32 error = 1;
  repeated ServerInfo lists = 2;
}

message GrpcRegisterRequest { ServerInfo info = 1; }
message GrpcShutdownRequest { string cur_server = 1; }
message GrpcStatusResponse { int32 error = 1; }
