syntax = "proto3";
package message;

service UserService {
  // User login
  rpc LoginUser(LoginRequest) returns (LoginResponse);

  // User logout
  rpc LogoutUser(LogoutRequest) returns (LogoutResponse);
}

message LoginRequest {
  int32 uuid = 1;
  string token = 2;
}

message LoginResponse { int32 error = 1; }

message LogoutRequest {
  int32 uuid = 1;
  string token = 2;
}

message LogoutResponse { int32 error = 1; }

service ChattingRegisterService {
  // Chatting server related
  rpc RegisterInstance(RegisterRequest) returns (StatusResponse);
  rpc RegisterGrpc(RegisterRequest) returns (StatusResponse);
  rpc ShutdownInstance(ShutdownRequest) returns (StatusResponse);
  rpc ShutdownGrpc(ShutdownRequest) returns (StatusResponse);
  rpc GetInstancePeers(PeerRequest) returns (PeerResponse);
  rpc GetGrpcPeers(PeerRequest) returns (PeerResponse);
}

message ServerInfo {
  string name = 1;
  string host = 2;
  string port = 3;
}

message RegisterRequest { ServerInfo info = 1; }

message ShutdownRequest { string cur_server = 1; }

message StatusResponse { int32 error = 1; }

message PeerRequest { string cur_server = 1; }

message PeerResponse {
  int32 error = 1;
  repeated ServerInfo lists = 2;
}


/*prepared for distributed chatting service*/
service DistributedChattingService {

  // A send friend request message to another user B
  rpc SendFriendRequest(FriendRequest) returns (FriendResponse) {}

  // User B agreed with user A's friend adding request
  rpc ConfirmFriendRequest(FriendRequest) returns (FriendResponse) {}

  // Verify that B is still A's friend:
  rpc FriendshipVerification(AuthoriseRequest) returns (AuthoriseResponse) {}

  // transfer chatting message from user A to B
  rpc SendChattingTextMsg(ChattingTextMsgRequest)
      returns (ChattingTextMsgResponse) {}
}

/*
 * A send friend request message to another user B and
 * A wait for Authorise message
 * we still need src/dst_uuid to verify sender's' and receiver's' identiy
 */
message FriendRequest {
  int32 src_uuid = 1;     // request from who
  int32 dst_uuid = 2;     // target
  string nick_name = 3;   // src nick name
  string req_msg = 4;     // request message that src wants to deliver
  string avator_path = 5; // src avator path
  string username = 6;    // src username
  string description = 7; // src description
  int32 sex = 8;
}
message FriendResponse {
  int32 error = 1;
  int32 src_uuid = 2; // request from who
  int32 dst_uuid = 3; // target
}

/*
 * 1. User B agreed with user A's friend adding request:
 *         when another user B agreed, then send an Authorise message back
 *        to notify A that B has already agreed the friend request
 *
 * 2. Verify that B is still A's friend:
 *
 * we still need src/dst_uuid to verify sender's' and receiver's' identiy
 */
message AuthoriseRequest {
  int32 src_uuid = 1; // request from who
  int32 dst_uuid = 2; // target
}

message AuthoriseResponse {
  int32 error = 1;
  int32 src_uuid = 2; // request from who
  int32 dst_uuid = 3; // target
}

message ChattingHistoryData {
  string msg_sender = 1;
  string msg_receiver = 2;
  string msg_id = 3;
  string msg_content = 4;
}

/*we still need src/dst_uuid to verify sender's' and receiver's' identiy*/
message ChattingTextMsgRequest {
  int32 src_uuid = 1;                     // request from who
  int32 dst_uuid = 2;                     // target
  repeated ChattingHistoryData lists = 3; // send message array
}

message ChattingTextMsgResponse {
  int32 error = 1;
  int32 src_uuid = 2; // request from who
  int32 dst_uuid = 3; // target
}
