// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace message {

static const char* ResourceService_method_names[] = {
  "/message.ResourceService/RegisterResourceServerInstance",
  "/message.ResourceService/RegisterResourceGrpcServer",
  "/message.ResourceService/ResourceServerShutDown",
  "/message.ResourceService/ResourceGrpcServerShutDown",
  "/message.ResourceService/GetPeerResourceServerInfo",
  "/message.ResourceService/GetPeerResourceGrpcServerInfo",
};

std::unique_ptr< ResourceService::Stub> ResourceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ResourceService::Stub> stub(new ResourceService::Stub(channel, options));
  return stub;
}

ResourceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterResourceServerInstance_(ResourceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterResourceGrpcServer_(ResourceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResourceServerShutDown_(ResourceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResourceGrpcServerShutDown_(ResourceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerResourceServerInfo_(ResourceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeerResourceGrpcServerInfo_(ResourceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ResourceService::Stub::RegisterResourceServerInstance(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterResourceServerInstance_, context, request, response);
}

void ResourceService::Stub::async::RegisterResourceServerInstance(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterResourceServerInstance_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::RegisterResourceServerInstance(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterResourceServerInstance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::PrepareAsyncRegisterResourceServerInstanceRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterResourceServerInstance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::AsyncRegisterResourceServerInstanceRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterResourceServerInstanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::RegisterResourceGrpcServer(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterResourceGrpcServer_, context, request, response);
}

void ResourceService::Stub::async::RegisterResourceGrpcServer(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterResourceGrpcServer_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::RegisterResourceGrpcServer(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterResourceGrpcServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::PrepareAsyncRegisterResourceGrpcServerRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterResourceGrpcServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::AsyncRegisterResourceGrpcServerRaw(::grpc::ClientContext* context, const ::message::GrpcRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterResourceGrpcServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::ResourceServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResourceServerShutDown_, context, request, response);
}

void ResourceService::Stub::async::ResourceServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceServerShutDown_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::ResourceServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceServerShutDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::PrepareAsyncResourceServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResourceServerShutDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::AsyncResourceServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResourceServerShutDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::ResourceGrpcServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::message::GrpcStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResourceGrpcServerShutDown_, context, request, response);
}

void ResourceService::Stub::async::ResourceGrpcServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceGrpcServerShutDown_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::ResourceGrpcServerShutDown(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceGrpcServerShutDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::PrepareAsyncResourceGrpcServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::GrpcStatusResponse, ::message::GrpcShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResourceGrpcServerShutDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::GrpcStatusResponse>* ResourceService::Stub::AsyncResourceGrpcServerShutDownRaw(::grpc::ClientContext* context, const ::message::GrpcShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResourceGrpcServerShutDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetPeerResourceServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeerResourceServerInfo_, context, request, response);
}

void ResourceService::Stub::async::GetPeerResourceServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerResourceServerInfo_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetPeerResourceServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerResourceServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourceService::Stub::PrepareAsyncGetPeerResourceServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerListsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeerResourceServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourceService::Stub::AsyncGetPeerResourceServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeerResourceServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ResourceService::Stub::GetPeerResourceGrpcServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::message::PeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeerResourceGrpcServerInfo_, context, request, response);
}

void ResourceService::Stub::async::GetPeerResourceGrpcServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerResourceGrpcServerInfo_, context, request, response, std::move(f));
}

void ResourceService::Stub::async::GetPeerResourceGrpcServerInfo(::grpc::ClientContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeerResourceGrpcServerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourceService::Stub::PrepareAsyncGetPeerResourceGrpcServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PeerResponse, ::message::PeerListsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeerResourceGrpcServerInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PeerResponse>* ResourceService::Stub::AsyncGetPeerResourceGrpcServerInfoRaw(::grpc::ClientContext* context, const ::message::PeerListsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeerResourceGrpcServerInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ResourceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcRegisterRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->RegisterResourceServerInstance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::GrpcRegisterRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcRegisterRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->RegisterResourceGrpcServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcShutdownRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->ResourceServerShutDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::GrpcShutdownRequest, ::message::GrpcStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::GrpcShutdownRequest* req,
             ::message::GrpcStatusResponse* resp) {
               return service->ResourceGrpcServerShutDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerListsRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetPeerResourceServerInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ResourceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ResourceService::Service, ::message::PeerListsRequest, ::message::PeerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ResourceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PeerListsRequest* req,
             ::message::PeerResponse* resp) {
               return service->GetPeerResourceGrpcServerInfo(ctx, req, resp);
             }, this)));
}

ResourceService::Service::~Service() {
}

::grpc::Status ResourceService::Service::RegisterResourceServerInstance(::grpc::ServerContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::RegisterResourceGrpcServer(::grpc::ServerContext* context, const ::message::GrpcRegisterRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::ResourceServerShutDown(::grpc::ServerContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::ResourceGrpcServerShutDown(::grpc::ServerContext* context, const ::message::GrpcShutdownRequest* request, ::message::GrpcStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetPeerResourceServerInfo(::grpc::ServerContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ResourceService::Service::GetPeerResourceGrpcServerInfo(::grpc::ServerContext* context, const ::message::PeerListsRequest* request, ::message::PeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

